
using System;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.Linq;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using AofC.Models;

namespace AofC
{

    public class Day11Program
    {
        List<long> pebbles= new List<long>();
        List<long> pebbles_= new List<long>();

        long count = 0;


        public Day11Program()
        {
            Console.WriteLine($"Day11 Started!");
            string fileExample = "Day11Example.txt";
            string filePuzzle = "Day11Input.txt";
            //var fileName = fileExample;
            var fileName = filePuzzle;

            CreatePebblesList(fileName);
            Day11Part1();
            //Day11Part2();
            //Day11Part2bis();
        }

        private void CreatePebblesList(string fileName)
        {
            string lines = File.ReadAllText(fileName);
            string RegPattern = @"(\d)+";
            Console.WriteLine(lines);
            foreach (Match match in Regex.Matches(lines, RegPattern))
            {
                pebbles.Add(Int32.Parse(match.Value));
            }
        }

        private void Day11Part1()
        {
            for (int blink = 0; blink < 75; blink++)
            {
                //var pebbles = blinks[blink];
                List<long> arrangement = new List<long>();

                foreach (var stone in CollectionsMarshal.AsSpan(pebbles))
                {
                //foreach (var stone in pebbles)
                    if (stone == 0)
                    {
                        arrangement.Add(1);
                        //Console.WriteLine($" 0 to 1");
                    }
                    else if (((stone).ToString().Length % 2) == 0)
                    {
                        //Console.WriteLine($" odd digits");
                        string digits = stone.ToString();
                        int length = digits.Length;
                        int half = length / 2;
                        string digitLeft = digits.Substring(0, half);
                        string digitright = digits.Substring(length - half);
                        // Console.WriteLine($"left {digitLeft} right{digitright}");
                        arrangement.Add(long.Parse(digitLeft));
                        arrangement.Add(long.Parse(digitright));

                    }
                    else
                    {
                        arrangement.Add(stone * 2024);
                        //Console.WriteLine($"  multiplied by 2024");
                    }
                }

                Console.WriteLine($"After {blink + 1} blinks");
                //DisplayListInt(arrangement);
                //blinks.Add(1+blink, arrangement);
                //count = arrangement.Count;
                pebbles = arrangement;
                arrangement = null;

            }Console.WriteLine($"stones: {pebbles.Count}");
        }

        private void Day11Part2bis()
        {
            List<long> stones;
            stones = new List<long>() { pebbles[0] };
            //var astones = ParallelIteration(stones, 75);
            //var bstones = ParallelIteration(astones, 25);
            //var cstones = ParallelIteration(bstones, 16);
            //var dstones = ParallelIteration(cstones, 15);
            BreakThisIteration(stones,15);
            //DisplayListInt(stones);
            //DisplayListInt(bstones);
        }

        private void ParallelStonesNumber (List<long> pebbles,int iteration)
        {

            var options = new ParallelOptions { MaxDegreeOfParallelism = Environment.ProcessorCount };

            for (int blink = 0; blink < iteration; blink++)
            {

                List<long> arrangement = new List<long>();
                Parallel.ForEach(pebbles, options, pebble =>
                {
                    Parallel.ForEach(PebblesAfterBlinks(pebble), options, stone => { arrangement.Add(stone); });
                });
                count += arrangement.Count;
                pebbles = arrangement;
                //arrangement.Clear();
                if (((blink + 1) % 1 == 0)&&(blink >= 10))
                {  Console.WriteLine($"@ {blink + 1} blinks");
                }
            }
            Console.WriteLine($"Total stones: {count}");
        }
        private List<long> ParallelIteration(List<long> pebbles, int iteration)
        {
            var options = new ParallelOptions { MaxDegreeOfParallelism = Environment.ProcessorCount };

            for (int blink = 0; blink < iteration; blink++)
            {
                List<long> arrangement = new List<long>();
                Parallel.ForEach(pebbles, options, pebble =>
                {
                Parallel.ForEach(PebblesAfterBlinks(pebble), options, stone => { arrangement.Add(stone); });
                });
                count += arrangement.Count;
                pebbles = arrangement;
                arrangement = null;
                if (((blink + 1) % 1 == 0)&&(blink >= 20))
                {  Console.WriteLine($"@ {blink + 1} blinks");
                }
            }
            Console.WriteLine($"Total stones: {count}");
            return pebbles;
        }

        private List<long> PebblesAfterBlinks( long stone)
        {
            List<long> pebblesAfterBlink = new List<long>();
            if (stone == 0)
            {
                pebblesAfterBlink.Add(1);
                //Console.WriteLine($" 0 to 1");
            }
            else if (((stone).ToString().Length % 2) == 0)
            {
                //Console.WriteLine($" odd digits");
                string digits = stone.ToString();
                int length = digits.Length;
                int half = length / 2;
                string digitLeft = digits.Substring(0, half);
                string digitright = digits.Substring(length - half);
                // Console.WriteLine($"left {digitLeft} right{digitright}");
                pebblesAfterBlink.Add(long.Parse(digitLeft));
                pebblesAfterBlink.Add(long.Parse(digitright));

            }
            else
            {
                pebblesAfterBlink.Add(stone * 2024);
                //Console.WriteLine($"  multiplied by 2024");
            }
            return pebblesAfterBlink;

        }

        private List<long> BreakThisIteration(List<long> pebbles,int iteration)
        {
            var stones = new List<long>();
            for (int numberOfPebbles = 0; numberOfPebbles <  pebbles.Count;numberOfPebbles++ )
            {
                stones.Add(pebbles[numberOfPebbles]);

                for (int blink = 0; blink < iteration; blink++)
                {

                    List<long> arrangement = new List<long>();
                    Parallel.ForEach(stones, stone =>
                    {


                        foreach (var item in CollectionsMarshal.AsSpan(PebblesAfterlinks(stone)))
                        {
                            arrangement.Add(item);
                        }



                    });
/*

                    for (int index = 0; index < stones.Count; index++)
                    {
                        Parallel.ForEach(PebblesAfterlinks(stones[index]), item =>
                        {
                            arrangement.Add(item);
                        });

                        foreach (var astone in PebblesAfterlinks(stones[index]))
                        {
                            arrangement.Add(astone);
                        }
                        */





                    if (((blink + 1) % 1 == 0)&&(blink >= 25))
                    {  Console.WriteLine($"@ {blink + 1} blinks");
                    }
                    //DisplayListInt(stones);
                    stones= arrangement;
                }

                count += stones.Count;
                //Console.WriteLine($"from { pebbles[numberOfPebbles]} to {stones.Count} stones");
                // break;
            }
            Console.WriteLine($"Total stones: {count}");
            return stones;
        }
        private void ReturnTheStonesNumber (List<long> pebbles,int iteration)
        {

            for (int numberOfPebbles = 0; numberOfPebbles < pebbles.Count; numberOfPebbles++)
            {
                var stones = new List<long>() { pebbles[numberOfPebbles] };
                //arrangement = new List<long>();
                for (int blink = 0; blink < iteration; blink++)
                {
                    var arrangement = new List<long>();
                    for (int index = 0; index < stones.Count; index++)
                    {
                        Parallel.ForEach(PebblesAfterlinks(stones[index]), item =>
                        {
                            arrangement.Add(item);
                        });

                    }
                    stones = arrangement;

                    if (((blink + 1) % 1 == 0)&&(blink >= 15))
                    {  Console.WriteLine($"@ {blink + 1} blinks");
                    }
                    //DisplayListInt(stones);
                }

                count += stones.Count;
                //Console.WriteLine($"from { pebbles[numberOfPebbles]} to {stones.Count} stones"); // break;
            }
            Console.WriteLine($"Total stones: {count}");
        }

        private void Day11Part2()
        {
            List<long> stones;
            for (int numberOfPebbles = 0; numberOfPebbles <  pebbles.Count;numberOfPebbles++ )
            {
                stones = new List<long>() { pebbles[numberOfPebbles] };
                List<long> arrangement;
                for (int blink = 0; blink < 75; blink++)
                {
                    arrangement = new List<long>();
                    for (int index = 0; index < stones.Count; index++)
                    {
                        Parallel.ForEach(PebblesAfterlinks(stones[index]), item =>
                        {
                            arrangement.Add(item);
                        });
                        //foreach (var astone in PebblesAfterlinks(stones[index]))
                        //{
                        //    arrangement.Add(astone);
                        //}

                    }
                    stones = arrangement;
                    if (((blink + 1) % 1 == 0)&&(blink >= 40))
                    {  Console.WriteLine($"@ {blink + 1} blinks");
                    }
                    //DisplayListInt(stones);
                }

                count += stones.Count;
                Console.WriteLine($"from { pebbles[numberOfPebbles]} to {stones.Count} stones");
                // break;
            }
            Console.WriteLine($"Total stones: {count}");
        }

        private List<long> PebblesAfterlinks( long stone)
        {
                List<long> pebblesAfterBlink = new List<long>();
                if (stone == 0)
                {
                    pebblesAfterBlink.Add(1);
                    //Console.WriteLine($" 0 to 1");
                }
                else if (((stone).ToString().Length % 2) == 0)
                {
                    //Console.WriteLine($" odd digits");
                    string digits = stone.ToString();
                    int length = digits.Length;
                    int half = length / 2;
                    string digitLeft = digits.Substring(0, half);
                    string digitright = digits.Substring(length - half);
                    // Console.WriteLine($"left {digitLeft} right{digitright}");
                    pebblesAfterBlink.Add(long.Parse(digitLeft));
                    pebblesAfterBlink.Add(long.Parse(digitright));

                }
                else
                {
                    pebblesAfterBlink.Add(stone * 2024);
                    //Console.WriteLine($"  multiplied by 2024");
                }
                return pebblesAfterBlink;

        }

        private List<long> BreakThisIteration(List<long> pebbles)
        { List<long> stones;
            for (int numberOfPebbles = 0; numberOfPebbles <  pebbles.Count;numberOfPebbles++ )
            {
                stones = new List<long>() { pebbles[numberOfPebbles] };
                List<long> arrangement;
                for (int blink = 0; blink < 25; blink++)
                {
                    arrangement = new List<long>();
                    for (int index = 0; index < stones.Count; index++)
                    {

                        foreach (var astone in PebblesAfterlinks(stones[index]))
                        {
                            arrangement.Add(astone);
                        }

                    }
                    stones = arrangement;
                    if (((blink + 1) % 1 == 0)&&(blink >= 15))
                    {  Console.WriteLine($"@ {blink + 1} blinks");
                    }
                    //DisplayListInt(stones);
                }

                count += stones.Count;
                Console.WriteLine($"from { pebbles[numberOfPebbles]} to {stones.Count} stones");
                // break;
            }
            Console.WriteLine($"Total stones: {count}");
            return pebbles;
        }



        private void DisplayListInt(List<long> aList)
        {
            foreach (var el in aList)
            {
                Console.Write($"|{el}| ");
            }

            Console.WriteLine();

        }
    }
}

/* iterate a list
       foreach (var element in list)
           Console.Write(element);
   or like an array
       for (int index = 0; index < list.Count; index += 1)
           Console.Write(list[index]);
    iterate a dictionary
foreach(KeyValuePair<string, string> ele2 in My_dict2)
  {
    Console.WriteLine("{0} and {1}", ele2.Key, ele2.Value);
    }
*/

namespace AofC
{

    public class Day11Program
    {


        long count = 0;


        public Day11Program()
        {
            Console.WriteLine($"Day11 Started!");
            //string fileExample = "Day11Example.txt";
            string filePuzzle = "Day11Input.txt";
            var fileName = filePuzzle;

            Day11Part1();

        }


        private List<long> CreatePebblesList(string fileName)
        {
            List<long> pebbles = new List<long>();
            string lines = File.ReadAllText(fileName);
            string RegPattern = @"(\d)+";
            Console.WriteLine(lines);
            foreach (Match match in Regex.Matches(lines, RegPattern))
            {
                pebbles.Add(Int32.Parse(match.Value));
            }

            return pebbles;
        }

        private void DisplayListInt(List<long> aList)
        {
            foreach (var el in aList)
            {
                Console.Write($"|{el}| ");
            }

            Console.WriteLine();
        }

        private void Day11Part1()
        {
            List<long> pebbles = new List<long>();
            pebbles = CreatePebblesList(fileName);

        }
    }
}
